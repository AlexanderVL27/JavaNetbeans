
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 12 21:48:21 CST 2022
//----------------------------------------------------

package analizadors;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 12 21:48:21 CST 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\007\000\002\003" +
    "\011\000\002\003\012\000\002\003\013\000\002\003\014" +
    "\000\002\003\013\000\002\003\014\000\002\003\013\000" +
    "\002\003\014\000\002\014\003\000\002\014\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\005\003\000\002\005\005\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\005\000\002\007\007\000\002\007" +
    "\005\000\002\007\007\000\002\007\007\000\002\007\007" +
    "\000\002\007\005\000\002\007\007\000\002\007\007\000" +
    "\002\007\006\000\002\007\006\000\002\007\006\000\002" +
    "\007\006\000\002\007\007\000\002\007\003\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\006\000\002\012\005\000" +
    "\002\010\011\000\002\010\013\000\002\010\012\000\002" +
    "\010\012\000\002\010\011\000\002\010\010\000\002\010" +
    "\011\000\002\011\007\000\002\020\005\000\002\020\004" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\015\006\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\017\004\000\002\017" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\007\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\017\010\001\002\000\006\045\014\046\013\001" +
    "\002\000\010\020\ufff7\045\014\046\013\001\002\000\004" +
    "\020\276\001\002\000\010\004\213\005\214\014\215\001" +
    "\002\000\004\010\015\001\002\000\004\015\016\001\002" +
    "\000\014\004\022\005\024\013\017\014\025\016\021\001" +
    "\002\000\004\010\212\001\002\000\004\016\206\001\002" +
    "\000\004\017\033\001\002\000\004\010\032\001\002\000" +
    "\006\011\030\016\ufff1\001\002\000\004\010\027\001\002" +
    "\000\004\010\026\001\002\000\006\011\ufff4\016\ufff4\001" +
    "\002\000\006\011\ufff3\016\ufff3\001\002\000\012\004\022" +
    "\005\024\013\017\014\025\001\002\000\004\016\ufff0\001" +
    "\002\000\006\011\ufff5\016\ufff5\001\002\000\020\004\046" +
    "\005\035\010\047\013\044\014\040\024\036\025\034\001" +
    "\002\000\004\024\036\001\002\000\004\010\175\001\002" +
    "\000\004\015\133\001\002\000\026\004\046\005\035\010" +
    "\047\013\044\014\040\016\uffee\020\uffee\024\036\025\034" +
    "\047\uffee\001\002\000\004\010\125\001\002\000\026\004" +
    "\uffd9\005\uffd9\010\uffd9\013\uffd9\014\uffd9\016\uffd9\020\uffd9" +
    "\024\uffd9\025\uffd9\047\uffd9\001\002\000\010\016\uffeb\020" +
    "\uffeb\047\uffeb\001\002\000\004\020\124\001\002\000\004" +
    "\010\115\001\002\000\012\016\uffed\020\uffed\025\111\047" +
    "\uffed\001\002\000\004\010\102\001\002\000\004\030\053" +
    "\001\002\000\012\016\uffec\020\uffec\025\051\047\uffec\001" +
    "\002\000\004\024\036\001\002\000\014\016\uffc9\020\uffc9" +
    "\024\uffc9\025\uffc9\047\uffc9\001\002\000\022\010\062\012" +
    "\065\026\063\027\060\031\057\034\055\037\064\043\061" +
    "\001\002\000\010\034\055\037\064\043\061\001\002\000" +
    "\004\010\100\001\002\000\004\023\077\001\002\000\004" +
    "\023\076\001\002\000\004\023\075\001\002\000\004\010" +
    "\074\001\002\000\012\023\072\034\055\037\064\043\061" +
    "\001\002\000\004\023\071\001\002\000\004\010\070\001" +
    "\002\000\004\012\066\001\002\000\004\023\067\001\002" +
    "\000\026\004\uffda\005\uffda\010\uffda\013\uffda\014\uffda\016" +
    "\uffda\020\uffda\024\uffda\025\uffda\047\uffda\001\002\000\012" +
    "\023\uffc1\034\uffc1\037\uffc1\043\uffc1\001\002\000\026\004" +
    "\uffdd\005\uffdd\010\uffdd\013\uffdd\014\uffdd\016\uffdd\020\uffdd" +
    "\024\uffdd\025\uffdd\047\uffdd\001\002\000\026\004\uffde\005" +
    "\uffde\010\uffde\013\uffde\014\uffde\016\uffde\020\uffde\024\uffde" +
    "\025\uffde\047\uffde\001\002\000\004\023\uffbf\001\002\000" +
    "\012\023\uffc2\034\uffc2\037\uffc2\043\uffc2\001\002\000\026" +
    "\004\uffdc\005\uffdc\010\uffdc\013\uffdc\014\uffdc\016\uffdc\020" +
    "\uffdc\024\uffdc\025\uffdc\047\uffdc\001\002\000\026\004\uffdb" +
    "\005\uffdb\010\uffdb\013\uffdb\014\uffdb\016\uffdb\020\uffdb\024" +
    "\uffdb\025\uffdb\047\uffdb\001\002\000\026\004\uffc3\005\uffc3" +
    "\010\uffc3\013\uffc3\014\uffc3\016\uffc3\020\uffc3\024\uffc3\025" +
    "\uffc3\047\uffc3\001\002\000\012\023\uffc0\034\uffc0\037\uffc0" +
    "\043\uffc0\001\002\000\004\023\uffbe\001\002\000\006\023" +
    "\103\030\104\001\002\000\026\004\uffea\005\uffea\010\uffea" +
    "\013\uffea\014\uffea\016\uffea\020\uffea\024\uffea\025\uffea\047" +
    "\uffea\001\002\000\006\010\106\026\105\001\002\000\004" +
    "\023\110\001\002\000\004\023\107\001\002\000\026\004" +
    "\uffe8\005\uffe8\010\uffe8\013\uffe8\014\uffe8\016\uffe8\020\uffe8" +
    "\024\uffe8\025\uffe8\047\uffe8\001\002\000\026\004\uffe9\005" +
    "\uffe9\010\uffe9\013\uffe9\014\uffe9\016\uffe9\020\uffe9\024\uffe9" +
    "\025\uffe9\047\uffe9\001\002\000\004\017\112\001\002\000" +
    "\020\004\046\005\035\010\047\013\044\014\040\024\036" +
    "\025\034\001\002\000\004\020\114\001\002\000\010\016" +
    "\uffca\020\uffca\047\uffca\001\002\000\006\023\116\030\117" +
    "\001\002\000\026\004\uffe1\005\uffe1\010\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\020\uffe1\024\uffe1\025\uffe1\047\uffe1\001\002" +
    "\000\006\010\121\022\120\001\002\000\004\023\123\001" +
    "\002\000\004\023\122\001\002\000\026\004\uffdf\005\uffdf" +
    "\010\uffdf\013\uffdf\014\uffdf\016\uffdf\020\uffdf\024\uffdf\025" +
    "\uffdf\047\uffdf\001\002\000\026\004\uffe0\005\uffe0\010\uffe0" +
    "\013\uffe0\014\uffe0\016\uffe0\020\uffe0\024\uffe0\025\uffe0\047" +
    "\uffe0\001\002\000\010\020\uffff\045\uffff\046\uffff\001\002" +
    "\000\006\023\126\030\127\001\002\000\026\004\uffe7\005" +
    "\uffe7\010\uffe7\013\uffe7\014\uffe7\016\uffe7\020\uffe7\024\uffe7" +
    "\025\uffe7\047\uffe7\001\002\000\004\031\130\001\002\000" +
    "\004\023\131\001\002\000\026\004\uffe6\005\uffe6\010\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\020\uffe6\024\uffe6\025\uffe6\047" +
    "\uffe6\001\002\000\010\016\uffef\020\uffef\047\uffef\001\002" +
    "\000\022\004\046\005\035\010\135\013\044\014\040\022" +
    "\137\024\036\025\034\001\002\000\004\016\167\001\002" +
    "\000\006\021\157\030\053\001\002\000\004\016\140\001" +
    "\002\000\004\016\uffd8\001\002\000\004\017\141\001\002" +
    "\000\022\004\046\005\035\010\047\013\044\014\040\020" +
    "\144\024\036\025\034\001\002\000\004\020\156\001\002" +
    "\000\010\020\150\024\036\025\147\001\002\000\014\016" +
    "\uffcc\020\uffcc\024\uffcc\025\uffcc\047\uffcc\001\002\000\014" +
    "\016\uffcb\020\uffcb\024\uffcb\025\uffcb\047\uffcb\001\002\000" +
    "\006\020\155\025\051\001\002\000\006\017\112\024\036" +
    "\001\002\000\014\016\uffcd\020\uffcd\024\uffcd\025\uffcd\047" +
    "\uffcd\001\002\000\004\020\153\001\002\000\004\025\111" +
    "\001\002\000\014\016\uffcf\020\uffcf\024\uffcf\025\uffcf\047" +
    "\uffcf\001\002\000\014\016\uffc8\020\uffc8\024\uffc8\025\uffc8" +
    "\047\uffc8\001\002\000\014\016\uffce\020\uffce\024\uffce\025" +
    "\uffce\047\uffce\001\002\000\014\016\uffd1\020\uffd1\024\uffd1" +
    "\025\uffd1\047\uffd1\001\002\000\016\010\165\012\163\022" +
    "\161\026\162\027\160\031\164\001\002\000\004\016\uffd5" +
    "\001\002\000\004\016\uffd7\001\002\000\004\016\uffd6\001" +
    "\002\000\004\012\166\001\002\000\004\016\uffd2\001\002" +
    "\000\004\016\uffd4\001\002\000\004\016\uffd3\001\002\000" +
    "\004\017\170\001\002\000\004\024\036\001\002\000\004" +
    "\025\034\001\002\000\006\024\036\025\051\001\002\000" +
    "\004\020\174\001\002\000\014\016\uffd0\020\uffd0\024\uffd0" +
    "\025\uffd0\047\uffd0\001\002\000\006\023\176\030\177\001" +
    "\002\000\026\004\uffe5\005\uffe5\010\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\020\uffe5\024\uffe5\025\uffe5\047\uffe5\001\002\000" +
    "\010\010\202\026\200\027\201\001\002\000\004\023\205" +
    "\001\002\000\004\023\204\001\002\000\004\023\203\001" +
    "\002\000\026\004\uffe2\005\uffe2\010\uffe2\013\uffe2\014\uffe2" +
    "\016\uffe2\020\uffe2\024\uffe2\025\uffe2\047\uffe2\001\002\000" +
    "\026\004\uffe4\005\uffe4\010\uffe4\013\uffe4\014\uffe4\016\uffe4" +
    "\020\uffe4\024\uffe4\025\uffe4\047\uffe4\001\002\000\026\004" +
    "\uffe3\005\uffe3\010\uffe3\013\uffe3\014\uffe3\016\uffe3\020\uffe3" +
    "\024\uffe3\025\uffe3\047\uffe3\001\002\000\004\017\207\001" +
    "\002\000\020\004\046\005\035\010\047\013\044\014\040" +
    "\024\036\025\034\001\002\000\004\020\211\001\002\000" +
    "\010\020\ufffe\045\ufffe\046\ufffe\001\002\000\006\011\ufff2" +
    "\016\ufff2\001\002\000\004\010\261\001\002\000\004\010" +
    "\244\001\002\000\004\010\216\001\002\000\004\015\217" +
    "\001\002\000\014\004\022\005\024\013\017\014\025\016" +
    "\221\001\002\000\004\016\237\001\002\000\004\017\222" +
    "\001\002\000\020\004\046\005\035\010\047\013\044\014" +
    "\040\024\036\025\034\001\002\000\004\047\225\001\002" +
    "\000\004\020\236\001\002\000\012\010\231\026\227\027" +
    "\226\031\230\001\002\000\004\023\235\001\002\000\004" +
    "\023\234\001\002\000\004\023\233\001\002\000\004\023" +
    "\232\001\002\000\004\020\uffc7\001\002\000\004\020\uffc5" +
    "\001\002\000\004\020\uffc6\001\002\000\004\020\uffc4\001" +
    "\002\000\010\020\ufffb\045\ufffb\046\ufffb\001\002\000\004" +
    "\017\240\001\002\000\020\004\046\005\035\010\047\013" +
    "\044\014\040\024\036\025\034\001\002\000\004\047\225" +
    "\001\002\000\004\020\243\001\002\000\010\020\ufffa\045" +
    "\ufffa\046\ufffa\001\002\000\004\015\245\001\002\000\014" +
    "\004\022\005\024\013\017\014\025\016\247\001\002\000" +
    "\004\016\254\001\002\000\004\017\250\001\002\000\020" +
    "\004\046\005\035\010\047\013\044\014\040\024\036\025" +
    "\034\001\002\000\004\047\225\001\002\000\004\020\253" +
    "\001\002\000\010\020\ufff9\045\ufff9\046\ufff9\001\002\000" +
    "\004\017\255\001\002\000\020\004\046\005\035\010\047" +
    "\013\044\014\040\024\036\025\034\001\002\000\004\047" +
    "\225\001\002\000\004\020\260\001\002\000\010\020\ufff8" +
    "\045\ufff8\046\ufff8\001\002\000\004\015\262\001\002\000" +
    "\014\004\022\005\024\013\017\014\025\016\264\001\002" +
    "\000\004\016\271\001\002\000\004\017\265\001\002\000" +
    "\020\004\046\005\035\010\047\013\044\014\040\024\036" +
    "\025\034\001\002\000\004\047\225\001\002\000\004\020" +
    "\270\001\002\000\010\020\ufffd\045\ufffd\046\ufffd\001\002" +
    "\000\004\017\272\001\002\000\020\004\046\005\035\010" +
    "\047\013\044\014\040\024\036\025\034\001\002\000\004" +
    "\047\225\001\002\000\004\020\275\001\002\000\010\020" +
    "\ufffc\045\ufffc\046\ufffc\001\002\000\004\002\000\001\002" +
    "\000\004\020\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\010\014\011\001\001\000\006\003\010\014\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\022\005\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\022" +
    "\005\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\042\007\036\010\044\011\041\015\040\020\047" +
    "\001\001\000\004\010\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\131\007\036\010\044\011\041" +
    "\015\040\020\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\051\001\001\000\002\001\001" +
    "\000\006\016\053\017\055\001\001\000\004\016\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\112\007\036\010\044\011\041\015" +
    "\040\020\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\133\007\036\010\044\011" +
    "\041\012\135\015\040\020\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\141\007\036\010\142\011\041" +
    "\015\040\020\047\001\001\000\002\001\001\000\010\010" +
    "\151\011\150\020\145\001\001\000\004\010\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\170\001\001\000\004\020\171\001\001\000" +
    "\006\010\151\011\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\207\007\036\010\044\011\041" +
    "\015\040\020\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\022\005" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\222\007\036\010\044\011\041\015\040\020\047\001" +
    "\001\000\004\013\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\240\007\036\010\044\011\041" +
    "\015\040\020\047\001\001\000\004\013\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\022\005\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\250\007\036\010\044\011\041\015\040" +
    "\020\047\001\001\000\004\013\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\255" +
    "\007\036\010\044\011\041\015\040\020\047\001\001\000" +
    "\004\013\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\022\005\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\265\007\036" +
    "\010\044\011\041\015\040\020\047\001\001\000\004\013" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\272\007\036\010\044\011\041\015" +
    "\040\020\047\001\001\000\004\013\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERANDO ::= OPERADOR OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERANDO",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERANDO ::= Identificador OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERANDO",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADOR ::= Multiplicacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADOR ::= Resta Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADOR ::= Suma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONES ::= Identificador Asigna OPERANDO Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RETORNO ::= Retorno NumeroDecimal Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETORNO",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RETORNO ::= Retorno Texto Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETORNO",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RETORNO ::= Retorno Numero Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETORNO",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETORNO ::= Retorno Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETORNO",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAELSEIF ::= Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIAELSEIF",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAELSEIF ::= SENTENCIAELSEIF Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIAELSEIF",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF_ELSE ::= IF Else LlaveApertura SENTENCIA LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If ParentesisApertura SENTENCIA_BOOLEANA ParentesisCierre LlaveApertura LlaveCierre IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If ParentesisApertura SENTENCIA_BOOLEANA ParentesisCierre LlaveApertura LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If ParentesisApertura SENTENCIA_BOOLEANA ParentesisCierre LlaveApertura IF LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= If ParentesisApertura SENTENCIA_BOOLEANA ParentesisCierre LlaveApertura IF SENTENCIAELSEIF LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF ::= If ParentesisApertura SENTENCIA_BOOLEANA ParentesisCierre LlaveApertura IF IF_ELSE LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= If ParentesisApertura SENTENCIA ParentesisCierre LlaveApertura IF SENTENCIAELSEIF IF_ELSE LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= If ParentesisApertura SENTENCIA_BOOLEANA ParentesisCierre LlaveApertura SENTENCIA LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Relacional Texto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Relacional NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Relacional TrueFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= TrueFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Identificador Asigna Comillas Comillas Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Identificador Asigna Texto Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Identificador Asigna NumeroDecimal Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Identificador Asigna Numero Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Identificador Asigna Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Booleano Identificador Asigna Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Booleano Identificador Asigna TrueFalse Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Booleano Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Decimal Identificador Asigna Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Decimal Identificador Asigna Numero Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Decimal Identificador Asigna NumeroDecimal Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Decimal Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Asigna Texto Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cadena Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador Asigna Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Asigna Numero Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Fin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIAELSEIF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= DECLARACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // METODO_PARAM ::= PARAM Coma METODO_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO_PARAM",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METODO_PARAM ::= PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO_PARAM",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAM ::= Booleano Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAM ::= Decimal Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAM ::= Cadena Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAM ::= Int Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GRUPO_METODOS ::= METODO GRUPO_METODOS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("GRUPO_METODOS",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GRUPO_METODOS ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("GRUPO_METODOS",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODO ::= MetodoRetorno Decimal Identificador ParentesisApertura METODO_PARAM ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= MetodoRetorno Decimal Identificador ParentesisApertura ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= MetodoRetorno Cadena Identificador ParentesisApertura METODO_PARAM ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODO ::= MetodoRetorno Cadena Identificador ParentesisApertura ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODO ::= MetodoRetorno Int Identificador ParentesisApertura METODO_PARAM ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METODO ::= MetodoRetorno Int Identificador ParentesisApertura ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METODO ::= MetodoVacio Identificador ParentesisApertura METODO_PARAM ParentesisCierre LlaveApertura SENTENCIA LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METODO ::= MetodoVacio Identificador ParentesisApertura ParentesisCierre LlaveApertura SENTENCIA LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Clase Identificador LlaveApertura GRUPO_METODOS LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

